clc;
clear;
close all;
%% Problem Definition
model1=CreateModel1();
CostFunction=@(x) MyCost(x,model1);      % Cost Function
nvar=model1.nvar;             % Number of Decision Variables
VarSize=[1 nvar];   % Size of Decision Variables Matrix
VarMin=0;           % Lower Bound of Variables
VarMax=1;     % Upper Bound of Variables
% Number of Objective Functions
nObj=numel(CostFunction(unifrnd(VarMin,VarMax,VarSize)));
%% NSGA-II Parameters
MaxIt=100;      % Maximum Number of Iterations
nPop=50;        % Population Size
pCrossover=0.7;                         % Crossover Percentage
nCrossover=2*round(pCrossover*nPop/2);  % Number of Parnets (Offsprings)
pMutation=0.4;                          % Mutation Percentage
nMutation=round(pMutation*nPop);        % Number of Mutants
mu=0.02;                    % Mutation Rate
sigma=0.1*(VarMax-VarMin);  % Mutation Step Size
%% Initialization
empty_individual.Position=[];
empty_individual.Cost=[];
empty_individual.Sol=[];
empty_individual.Rank=[];
empty_individual.DominationSet=[];
empty_individual.DominatedCount=[];
empty_individual.CrowdingDistance=[];
 pop=repmat(empty_individual,nPop,1);
 for i=1:nPop
     pop(i).Position=unifrnd(VarMin,VarMax,VarSize);
     [pop(i).Cost pop(i).Sol]=CostFunction(pop(i).Position);
 end
 % Non-Dominated Sorting
[pop F]=NonDominatedSorting(pop);
 % Calculate Crowding Distance
pop=CalcCrowdingDistance(pop,F);
 % Sort Population
[pop F]=SortPopulation(pop);
 %% NSGA-II Main Loop
 for it=1:MaxIt
     % Crossover
    popc=repmat(empty_individual,nCrossover/2,2);
    for k=1:nCrossover/2
         i1=randi([1 nPop]);
        p1=pop(i1);
         i2=randi([1 nPop]);
        p2=pop(i2);
         [popc(k,1).Position popc(k,2).Position]=Crossover(p1.Position,p2.Position);
         [popc(k,1).Cost popc(k,1).Sol]=CostFunction(popc(k,1).Position);
        [popc(k,2).Cost popc(k,2).Sol]=CostFunction(popc(k,2).Position);
     end
    popc=popc(:);
     % Mutation
    popm=repmat(empty_individual,nMutation,1);
    for k=1:nMutation
        i=randi([1 nPop]);
        p=pop(i);
       popm(k).Position=Mutate(p.Position,mu,sigma,VarMin,VarMax);
       [popm(k).Cost popm(k).Sol]=CostFunction(popm(k).Position);
    end
   % Merge
    pop=[pop
         popc
         popm];
   % Non-Dominated Sorting
    [pop F]=NonDominatedSorting(pop);
   % Calculate Crowding Distance
    pop=CalcCrowdingDistance(pop,F);
   % Sort Population
    [pop F]=SortPopulation(pop);
    % Truncate
    pop=pop(1:nPop);
    % Non-Dominated Sorting
    [pop F]=NonDominatedSorting(pop);
   % Calculate Crowding Distance
    pop=CalcCrowdingDistance(pop,F);
   % Sort Population
    [pop F]=SortPopulation(pop);
    % Store F1
    F1=pop(F{1});
    % Show Iteration Information
    disp(['Iteration ' num2str(it) ': Number of F1 Members = ' num2str(numel(F1))]);
    % Plot F1 Costs
    figure(1);
    PlotCosts(F1);
end
 %% Results
[-------------------------------------------------------]
Function Model1
function model1=CreateModel1()
Return=[-0.006130702    0.029922366 0.010991793 0.032247631 1.00746E-05 0.025288073 -0.019386521    0.031594999 -0.00242411 0.028341694 0.209924162 0.00288918  0.004889538 0.009473847
];
Variance=[0.039272956   0.042763909 0.009969041 0.04980065  0.002077538 0.058442336 0.011833261 0.061026913 0.001179065 0.079247047 0.414615522 0.00823192  0.00597068  0.004507949
];
nvar=length(Return);
    model1.Return=Return;
    model1.Variance=Variance;
    model1.nvar=nvar;
end
[--------------------------------------------------------]
Function Mycost
function [Z sol]=MyCost(x,model1)
  Return=model1.Return;
    Variance=model1.Variance;
    nvar=model1.nvar;
    for i=1:nvar
       x(i)=x(i)./sum(x); 
    end
    Z1=sum(Return.*x);
     Z2=sum(Variance.*x);
    Z=[Z1
        Z2];
   sol.fit=Z;
   sol.x=x;
end
[--------------------------------------------------------------]
Function Crossover
function [y1 y2]=Crossover(x1,x2)
    alpha=rand(size(x1));
    y1=alpha.*x1+(1-alpha).*x2;
    y2=alpha.*x2+(1-alpha).*x1;
end
[----------------------------------------------------------------]
Function Mutation
function y=Mutate(x,mu,sigma,VarMin,VarMax)
    nVar=numel(x);
    nMu=ceil(mu*nVar);
    j=randsample(nVar,nMu);
    xnew=x+sigma.*randn(size(x));
    y=x;
    y(j)=xnew(j);
    y=max(y,VarMin);
    y=min(y,VarMax);
end
[------------------------------------------------------------]
Function Dominate
function b=Dominates(x,y)
    if isstruct(x)
        x=x.Cost;
    end
    if isstruct(y)
        y=y.Cost;
    end
    b=all(x<=y) && any(x<y);
end
[------------------------------------------------------------]
Function NonDominatedSorting
function [pop F]=NonDominatedSorting(pop)
    nPop=numel(pop);
    for i=1:nPop
        pop(i).DominationSet=[];
        pop(i).DominatedCount=0;
    end
    F{1}=[];
   for i=1:nPop
        for j=i+1:nPop
            p=pop(i);
            q=pop(j);
            if Dominates(p,q)
                p.DominationSet=[p.DominationSet j];
                q.DominatedCount=q.DominatedCount+1;
            end
           if Dominates(q.Cost,p.Cost)
                q.DominationSet=[q.DominationSet i];
                p.DominatedCount=p.DominatedCount+1;
            end
           pop(i)=p;
            pop(j)=q;
        end
       if pop(i).DominatedCount==0
            F{1}=[F{1} i];
            pop(i).Rank=1;
        end
    end
   k=1;
    while true
       Q=[];
       for i=F{k}
            p=pop(i);
           for j=p.DominationSet
                q=pop(j);
               q.DominatedCount=q.DominatedCount-1;
               if q.DominatedCount==0
                    Q=[Q j];
                    q.Rank=k+1;
                end
               pop(j)=q;
            end
        end
       if isempty(Q)
            break;
        end
       F{k+1}=Q;
        k=k+1;
    end
end
 [-------------------------------------------------------------]
Function CalcCrowdingDistance
function pop=CalcCrowdingDistance(pop,F)
    nF=numel(F);
     for k=1:nF
         Costs=[pop(F{k}).Cost];
        nObj=size(Costs,1);
        n=numel(F{k});
        d=zeros(n,nObj);
              for j=1:nObj
                  [cj so]=sort(Costs(j,:));
                  d(so(1),j)=inf;
                   for i=2:n-1
                     d(so(i),j)=abs(cj(i+1)-cj(i-1))/abs(cj(1)-cj(end));
                  end
                  d(so(end),j)=inf;
               end
              for i=1:n
                  pop(F{k}(i)).CrowdingDistance=sum(d(i,:));
              end
          end
 end
 [------------------------------------------------------]
Function SortPopulation
function [pop F]=SortPopulation(pop)
     % Sort Based on Crowding Distance
    [~, CDSO]=sort([pop.CrowdingDistance],'descend');
    pop=pop(CDSO);
     % Sort Based on Rank
    [~, RSO]=sort([pop.Rank]);
    pop=pop(RSO);
    % Update Fronts
    Ranks=[pop.Rank];
    MaxRank=max(Ranks);
    F=cell(MaxRank,1);
    for r=1:MaxRank
        F{r}=find(Ranks==r);
    end
 end
[----------------------------------------------------------------]
Function Plotcost
function PlotCosts(pop)
    Costs=[pop.Cost];
    plot(-Costs(1,:),Costs(2,:),'r*','MarkerSize',8);
    xlabel('1st Objective');
    ylabel('2nd Objective');
    grid on;
end
[----------------------------------------------------------------]
